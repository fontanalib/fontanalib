<?php
use Drupal\user\Entity\User;
use Drupal\Core\Url;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\Node;
use Drupal\Core\Cache\Cache;
use Drupal\node\NodeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Entity\EntityTypeInterface;
/**
 * @file
 * Contains fontanalib.module.
 */

/**
 * Implements hook_user_cancel_methods_alter().
 */
function fontanalib_user_cancel_methods_alter(&$methods) {
  $account = \Drupal::currentUser();
  $methods['user_cancel_designate'] = [
    'title' => t('Disable the account and make its content belong to another user.'),
    'description' => t('All the content will be assigned to another user.'),
    'access' => $account
      ->hasPermission('administer users'),
  ];
}

/**
 * Implements hook_form_alter().
 */
function fontanalib_form_alter(&$form, $form_state, $form_id) {
  $forms = ["user_multiple_cancel_confirm", "user_cancel_form"];
  if (in_array($form_id, $forms)) {
    $roles = \Drupal::config('fontanalib.settings')->get('role_content_assign');
    if(empty($roles) || !isset($roles['node'])){
      //$roles = [];
      $role_array = \Drupal::entityTypeManager()->getStorage('user_role')->loadMultiple();
      $roles = [];
      foreach($role_array as $role){
        if($role->hasPermission('access content overview')){
          $roles[$role->id] = $role->label;
        }
      }
    }

    if(!isset($form['user_cancel_reassign_to'])){
      $form['#tree'] = TRUE;
      $form['user_cancel_reassign_to'] = [
        '#type' => 'fieldset',
        '#title' => t('Re-assignment options'),
        //'#tree' => TRUE,
      ];
    }

    $form['user_cancel_reassign_to']['node'] = [
      '#type' => 'entity_autocomplete',
      '#title' => t("User to assign content to"),
      '#target_type' => 'user',
      '#selection_settings' => [
        'include_anonymous' => FALSE,
        'filter' => [
          'type' => 'role',
          'role' => isset($roles['node']) ? $roles['node'] : $roles,
        ],
      ],
      '#states' => [
        'visible' => [
          '[name="user_cancel_method"]' => [
            'value' => 'user_cancel_designate',
          ],
        ],
        'required' => [
          '[name="user_cancel_method"]' => [
            'value' => 'user_cancel_designate',
          ],
        ],
      ],
      // Validation is done in static::validateConfigurationForm().
      '#size' => '60',
      '#maxlength' => '60',
      "#description" => t("Select a user to reassign content to."),
      '#required' => FALSE,
    ];
    // Rearrange things in the form: user_cancel_reassign_to must be in between
    // other fields.
    $form['account']['#weight'] = 0;
    $form['user_cancel_method']['#weight'] = 10;
    $form['user_cancel_reassign_to']['#weight'] = 20;
    $form['user_cancel_confirm']['#weight'] = 30;
    $form['description']['#weight'] = 40;
  } 
}
function fontanalib_form_nodeaccess_admin_settings_alter(&$form, FormStateInterface $form_state, $form_id){
  $node_types = \Drupal::entityTypeManager()->getStorage('node_type')->loadMultiple();
  // $roles = \Drupal::entityTypeManager()->getStorage('user_role')->loadMultiple();
  // Generate fieldsets for each node type.
  foreach ($node_types as $type => $bundle) {
    $form[$type]['fontanalib_edit_access_config_permissions'] = [
      '#type' => 'checkbox',
      '#title' => t('Allow authors to configure edit permissions'),
      '#default_value' => \Drupal::config('fontanalib.settings')->get("access_settings.$type.edit_config"),
      '#description' => t('Allow authors to grant edit permissions to the members of groups to which this content belongs.'),
    ];
  }
    $form['#submit'][] = 'fontanalib_form_nodeaccess_settings';

}
function fontanalib_form_nodeaccess_settings(array &$form, FormStateInterface $form_state){
  $config = \Drupal::service('config.factory')->getEditable('fontanalib.settings');
  $node_types = \Drupal::entityTypeManager()->getStorage('node_type')->loadMultiple();
  $values = $form_state->getValues();
  // $access_settings=$config->get('access');
  foreach ($node_types as $type => $bundle) {
    $config->set("access_settings.$type.edit_config", $values[$type]['fontanalib_edit_access_config_permissions']);
  }
  $config->save();
}
function fontanalib_form_nodeaccess_grants_form_alter(&$form, FormStateInterface $form_state, $form_id){
  // $values = $form_state->getValues();
  // dd($form);
  $nid=$form['nid']["#value"];
  $node = Node::load($nid);
  $type = $node->bundle();
  $perms = \Drupal::config('fontanalib.settings')->get("access_settings.$type.edit_config");
  
  $allowance = $node->fontanalib_nodeaccess_group->value;//$node->get('fontanalib_nodeaccess_group')->getValue();

  $allowance = $allowance == 1 ? 1 : 0;


  $form['fontanalib_allow_related_groups_edit'] = [
    '#type' => 'checkbox',
    '#title' => t('Allow staff in related groups to edit this content'),
    '#default_value' => $allowance,
    '#description' => t('If checked, staff who are members of groups tagged or added in the field "groups" will be able to edit this content.'),
    '#access' => FALSE,
  ];
  $groups = $node->hasField('field_group') ? $node->get('field_group')->getValue() : [];
  
  $allowed_groups = array();

  if(!empty($groups)){
    foreach($groups as $group){
      $allowed_groups[] = (int) $group['target_id'];
    }
  }

  $form['allowed_groups'] = [
    '#type' => 'hidden',
    '#value' => $allowed_groups,
  ];

  $form['orig_fontanalib_nodeaccess_group'] = [
    '#type' => 'hidden',
    '#value' => $allowance,
  ];

  if($perms && !empty($perms)){
    $form['fontanalib_allow_related_groups_edit']['#access'] = TRUE;
  }
  
  $form['#submit'] = ['fontanalib_nodeaccess_grants_alter'];
  $form['actions']['submit']['#submit'] = ['fontanalib_nodeaccess_grants_alter'];
  
}
/**
 * 
 * 
 */
function fontanalib_nodeaccess_grants_alter(array &$form, FormStateInterface $form_state){
  $values = $form_state->getValues();
  $nid = $values['nid'];
  $allowance = $values['fontanalib_allow_related_groups_edit'];
  $change = $values['orig_fontanalib_nodeaccess_group'] == $allowance ? FALSE : TRUE;
  $grants = [];

  $groups = $values['allowed_groups'];
  if (!empty($groups) && $allowance === 1) {
    foreach($groups as $group){
      $grants[] = [
          'gid' => $group,
          'realm' => 'fontanalib_nodeaccess_group',
          'grant_view' => 0,
          'grant_update' => 1,
          'grant_delete' => 0,
      ];
    }
  }

  foreach (['uid', 'rid'] as $type) {
    $realm = 'nodeaccess_' . $type;
    if (isset($values[$type]) && is_array($values[$type])) {
      foreach ($values[$type] as $gid => $line) {
        $grant = [
          'gid' => $gid,
          'realm' => $realm,
          'grant_view' => empty($line['grant_view']) ? 0 : $line['grant_view'],
          'grant_update' => empty($line['grant_update']) ? 0 : $line['grant_update'],
          'grant_delete' => empty($line['grant_delete']) ? 0 : $line['grant_delete'],
        ];
        if ($grant['grant_view'] || $grant['grant_update'] || $grant['grant_delete']) {
          $grants[] = $grant;
        }
      }
    }
  }

  // Save role and user grants to our own table.
  \Drupal::database()->delete('nodeaccess')
    ->condition('nid', $nid)
    ->execute();

  foreach ($grants as $grant) {
    $query = \Drupal::database()->insert('nodeaccess');
    $id = $query->fields([
      'nid' => $nid,
      'gid' => $grant['gid'],
      'realm' => $grant['realm'],
      'grant_view' => $grant['grant_view'],
      'grant_update' => $grant['grant_update'],
      'grant_delete' => $grant['grant_delete'],
      ])->execute();
  }

  $node = Node::load($nid); 
  if($change){
    $node->set('fontanalib_nodeaccess_group', $allowance)->save();
  }
  \Drupal::entityTypeManager()->getAccessControlHandler('node')->writeGrants($node);
  drupal_set_message(t('Grants Saved.'));
  $tags = ['node:' . $nid];
  Cache::invalidateTags($tags);
}
/**
 * Implements hook_user_cancel().
 */
function fontanalib_user_cancel($edit, $account, $method) {
  switch ($method) {
    case 'user_cancel_designate':
      $entities = \Drupal::config('fontanalib.settings')->get('entities');
      foreach($entities as $entity){
      if (!isset($edit['user_cancel_reassign_to']) || !isset($edit['user_cancel_reassign_to'][$entity]) || empty($edit['user_cancel_reassign_to'][$entity])) {
        $message = t('Please select a user to reassign each type of content to.');
        \Drupal::messenger()->addError($message, TRUE);
        return FALSE;
      } else if($account->id() === $edit['user_cancel_reassign_to'][$entity]) {
        $message = t('Can not reassign node content to user account being cancelled. Please select a valid user to assign content to.');
        \Drupal::messenger()->addError($message, TRUE);
        return FALSE;
      }
      $new_user = User::load($edit['user_cancel_reassign_to'][$entity]);
      $vids = \Drupal::entityTypeManager()->getStorage($entity)->userRevisionIds($account);//\Drupal::entityManager()->getStorage($entity)->userRevisionIds($account);
      switch($entity){
        case 'node':
          module_load_include('inc', 'node', 'node.admin');
          node_mass_update($vids, [
            'uid' => $edit['user_cancel_reassign_to']['node'],
            'revision_uid' => $edit['user_cancel_reassign_to']['node'],
          ], NULL, TRUE, TRUE);
          $message = t('Nodes from cancelled account have been assigned to @user.', ['@user' => $new_user->getDisplayName()]);
          \Drupal::messenger()->addStatus($message, TRUE);
          break;
        default:
          module_load_include('inc', 'fontanalib', 'fontanalib.admin');
          entity_mass_update($vids, [
            'uid' => $edit['user_cancel_reassign_to'][$entity],
            'revision_uid' => $edit['user_cancel_reassign_to'][$entity],
          ], NULL, TRUE, TRUE);
          $message = t('@type entities from cancelled account have been assigned to @user.', ['@user' => $new_user->getDisplayName(), '@type' => $entity]);
          \Drupal::messenger()->addStatus($message, TRUE);
          break;
      }
    } break;  
  }
}
/**
 * Implements hook_toolbar().
 */
function fontanalib_toolbar() {

  $items = [];

  $links['settings'] = [
    '#type' => 'link',
    '#title' => t('Settings'),
    '#url' => Url::fromRoute('fontanalib.settings'),
    '#attributes' => [
      'class' => 'toolbar-icon toolbar-icon-system-admin-config',
    ],
  ];

  $items['fontanalib'] = [
    '#type' => 'toolbar_item',
    'tab' => [
      '#type' => 'link',
      '#title' => t('Fontanalib'),
      '#url' => Url::fromRoute('fontanalib.settings'),
      '#options' => [
        'attributes' => [
          'title' => t('Fontanaliv'),
          'class' => 'trigger toolbar-item toolbar-icon toolbar-icon-system-admin-structure',
        ],
      ],
    ],
    'tray' => [
      '#heading' => t('Fontanalib sections'),
      'links' => [
        '#theme' => 'item_list',
        '#items' => $links,
      ],

    ],
    '#weight' => -10,
  ];

  return $items;
}
/**
 * Implements hook_node_grants().
 * 
 * is called to determine access and is what is used to check the node_access table
 */
function fontanalib_node_grants_alter(&$grants, AccountInterface $account, $op) {
  if($op === 'update' && in_array('staff', $account->getRoles())) {
    $user = \Drupal\user\Entity\User::load($account->id());
    $groups = array();
    foreach ($user->getFields() as $key => $field) {
      if ($field->getFieldDefinition()->getType() == 'entity_reference') {
        $targetType = $field->getFieldDefinition()
          ->getItemDefinition()
          ->getSetting('target_type');
        if ($targetType == 'taxonomy_term') {
          $new_terms = array_map(function (\Drupal\taxonomy\TermInterface $term) {
            // Need to check if Vocabulary is a "GROUP" type....
            return $term->id();
          }, $field->referencedEntities());
          $groups = array_merge($groups, $new_terms);
        }
      }
    }
    $grants['fontanalib_nodeaccess_group'] = $groups;
  }
  return $grants;
}

/**
 * Implements hook_entity_base_field_info().
 */
function fontanalib_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];

  if ($entity_type->id() === 'node') {
    $fields['fontanalib_nodeaccess_group'] = BaseFieldDefinition::create('boolean')
      ->setLabel(t('Group NodeAccess Setting'))
      ->setDisplayOptions('view', [
        'label' => 'hidden',
        'region' => 'hidden',
        'weight' => -5,
      ])
      ->setDisplayOptions('form', [
        'label' => 'hidden',
        'region' => 'hidden',
        'weight' => -5,
      ])
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayConfigurable('view', FALSE)
      ->setTranslatable(TRUE)
      ->setRevisionable(TRUE);
  }

  return $fields;
}
