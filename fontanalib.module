<?php
use Drupal\user\Entity\User;
use Drupal\Core\Url;

use Drupal\node\NodeInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\tac_lite\Form\SchemeForm;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Database\Query\AlterableInterface;
use Drupal\Core\Routing\RouteMatchInterface;
/**
 * @file
 * Contains fontanalib.module.
 */
/**
 * Implements hook_node_access_records().
 * called when each node is saved
 */
function fontanalib_node_access_records(NodeInterface $node) {
  $grants = [];
  // We only care about the node if it's published.
  // We don't want to override view published permissions.
  if ($node->isPublished()) {
    $grants[] = [
      'realm' => "view_any_{$node->getType()}_content",
      'gid' => 1,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 0,
    ];
    $grants[] = [
      'realm' => "view_own_{$node->getType()}_content",
      'gid' => $node->getOwnerId(),
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 0,
    ];
  }
  //If this node is a type with custom view permissions
  if($node->getEntityType()->getThirdPartySetting('fontanalib', 'publish_public', $config->get('default_publish_public'))){

    //FIRST-- 
    // if($node->getEntityType()->getThirdPartySetting('fontanalib', 'publish_public', $config->get('default_publish_public'))){

    // }
    
    // $grants[] = [
    //   'nid' => $node->id(),
    //   'realm' => "view_county_content",
    //   'gid' => 1,
    //   'grant_view' => 1,
    //   'grant_update' => 0,
    //   'grant_delete' => 0,
    //   'priority' => 0,
    // ];
  
  }
  if($node->getEntityType()->getThirdPartySetting('fontanalib', 'edit_access_enable', $config->get('default_edit_access_enable'))){

  }
  return $grants;
  
}
/**
 * Implements hook_node_grants().
 * 
 * is called to determine access and is what is used to check the node_access table
 */
function fontanalib_node_grants(AccountInterface $account, $op) {
  $grants = [];
  if ($op == 'view') {
    foreach (NodeType::loadMultiple() as $type) {
      $type_id = $type->id();
      if ($account->hasPermission("view any $type_id content")) {
        $grants["view_any_{$type_id}_content"] = [1];
      }
      if ($account->hasPermission("view own $type_id content")) {
        $grants["view_own_{$type_id}_content"] = [$account->id()];
      }
    }
  }
  return $grants;
}

/**
 * Implements hook_user_cancel_methods_alter().
 */
function fontanalib_user_cancel_methods_alter(&$methods) {
  $account = \Drupal::currentUser();
  $methods['user_cancel_designate'] = [
    'title' => t('Disable the account and make its content belong to another user.'),
    'description' => t('All the content will be assigned to another user.'),
    'access' => $account
      ->hasPermission('administer users'),
  ];
}

/**
 * Implements hook_form_alter().
 */
function fontanalib_form_alter(&$form, $form_state, $form_id) {
  $forms = ["user_multiple_cancel_confirm", "user_cancel_form"];
  if (in_array($form_id, $forms)) {
    $roles = \Drupal::config('fontanalib.settings')->get('role_content_assign');
    if(empty($roles) || !isset($roles['node'])){
      //$roles = [];
      $role_array = \Drupal::entityTypeManager()->getStorage('user_role')->loadMultiple();
      $roles = [];
      foreach($role_array as $role){
        if($role->hasPermission('access content overview')){
          $roles[$role->id] = $role->label;
        }
      }
    }

    if(!isset($form['user_cancel_reassign_to'])){
      $form['#tree'] = TRUE;
      $form['user_cancel_reassign_to'] = [
        '#type' => 'fieldset',
        '#title' => t('Re-assignment options'),
        //'#tree' => TRUE,
      ];
    }

    $form['user_cancel_reassign_to']['node'] = [
      '#type' => 'entity_autocomplete',
      '#title' => t("User to assign content to"),
      '#target_type' => 'user',
      '#selection_settings' => [
        'include_anonymous' => FALSE,
        'filter' => [
          'type' => 'role',
          'role' => isset($roles['node']) ? $roles['node'] : $roles,
        ],
      ],
      '#states' => [
        'visible' => [
          '[name="user_cancel_method"]' => [
            'value' => 'user_cancel_designate',
          ],
        ],
        'required' => [
          '[name="user_cancel_method"]' => [
            'value' => 'user_cancel_designate',
          ],
        ],
      ],
      // Validation is done in static::validateConfigurationForm().
      '#size' => '60',
      '#maxlength' => '60',
      "#description" => t("Select a user to reassign content to."),
      '#required' => FALSE,
    ];
    // Rearrange things in the form: user_cancel_reassign_to must be in between
    // other fields.
    $form['account']['#weight'] = 0;
    $form['user_cancel_method']['#weight'] = 10;
    $form['user_cancel_reassign_to']['#weight'] = 20;
    $form['user_cancel_confirm']['#weight'] = 30;
    $form['description']['#weight'] = 40;
  }
}

/**
 * Implements hook_user_cancel().
 */
function fontanalib_user_cancel($edit, $account, $method) {
  switch ($method) {
    case 'user_cancel_designate':
      $entities = \Drupal::config('fontanalib.settings')->get('entities');
      foreach($entities as $entity){
      if (!isset($edit['user_cancel_reassign_to']) || !isset($edit['user_cancel_reassign_to'][$entity]) || empty($edit['user_cancel_reassign_to'][$entity])) {
        $message = t('Please select a user to reassign each type of content to.');
        \Drupal::messenger()->addError($message, TRUE);
        return FALSE;
      } else if($account->id() === $edit['user_cancel_reassign_to'][$entity]) {
        $message = t('Can not reassign node content to user account being cancelled. Please select a valid user to assign content to.');
        \Drupal::messenger()->addError($message, TRUE);
        return FALSE;
      }
      $new_user = User::load($edit['user_cancel_reassign_to'][$entity]);
      $vids = \Drupal::entityTypeManager()->getStorage($entity)->userRevisionIds($account);//\Drupal::entityManager()->getStorage($entity)->userRevisionIds($account);
      switch($entity){
        case 'node':
          module_load_include('inc', 'node', 'node.admin');
          node_mass_update($vids, [
            'uid' => $edit['user_cancel_reassign_to']['node'],
            'revision_uid' => $edit['user_cancel_reassign_to']['node'],
          ], NULL, TRUE, TRUE);
          $message = t('Nodes from cancelled account have been assigned to @user.', ['@user' => $new_user->getDisplayName()]);
          \Drupal::messenger()->addStatus($message, TRUE);
          break;
        default:
          module_load_include('inc', 'fontanalib', 'fontanalib.admin');
          entity_mass_update($vids, [
            'uid' => $edit['user_cancel_reassign_to'][$entity],
            'revision_uid' => $edit['user_cancel_reassign_to'][$entity],
          ], NULL, TRUE, TRUE);
          $message = t('@type entities from cancelled account have been assigned to @user.', ['@user' => $new_user->getDisplayName(), '@type' => $entity]);
          \Drupal::messenger()->addStatus($message, TRUE);
          break;
      }
    } break;  
  }
}
/**
 * Implements hook_toolbar().
 */
function fontanalib_toolbar() {

  $items = [];

  $links['settings'] = [
    '#type' => 'link',
    '#title' => t('Settings'),
    '#url' => Url::fromRoute('fontanalib.settings'),
    '#attributes' => [
      'class' => 'toolbar-icon toolbar-icon-system-admin-config',
    ],

  ];

  $items['fontanalib'] = [
    '#type' => 'toolbar_item',
    'tab' => [
      '#type' => 'link',
      '#title' => t('Fontanalib'),
      '#url' => Url::fromRoute('fontanalib.settings'),
      '#options' => [
        'attributes' => [
          'title' => t('Fontanaliv'),
          'class' => 'trigger toolbar-item toolbar-icon toolbar-icon-system-admin-structure',
        ],
      ],
    ],
    'tray' => [
      '#heading' => t('Fontanalib sections'),
      'links' => [
        '#theme' => 'item_list',
        '#items' => $links,
      ],

    ],
    '#weight' => -10,
  ];

  return $items;
}
/**
 * Implements hook_form_FORM_ID_alter() for node_type_form().
 */
function fontanalib_form_node_type_form_alter(array &$form, FormStateInterface $form_state) {
  // Load the real code only when needed.
  module_load_include('inc', 'fontanalib', 'fontanalib.admin');
  _fontanalib_form_node_type_form_alter($form, $form_state);
}
/**
 * Implements hook_form_FORM_ID_alter() for node_form().
 */
function fontanalib_form_node_form_alter(&$form, FormStateInterface $form_state) {
  $config = \Drupal::config('fontanalib.settings');
  /** @var \Drupal\node\NodeTypeInterface $type */
  $type = $form_state->getFormObject()->getEntity()->type->entity;
  $type_id = $type->id();
  $publishing_enabled = $type->getThirdPartySetting('fontanalib', 'publish_public', $config->get('default_publish_public'));
  $edit_access_enable = $type->getThirdPartySetting('fontanalib', 'edit_access_enable', $config->get('default_edit_access_enable'));
  

  $node = $form_state->getFormObject()->getEntity();
  if (!$publishing_enabled  && !$edit_access_enable) {
    // unset($form['publish_config_on']);
    // unset($form['edit_config_on']);
    return;
  }

  // Create the group for the fields.
  $form['fontanalib_access_settings'] = [
    '#type' => 'details',
    '#title' => t('Access Control Options'),
    '#weight' => 35,
    '#attributes' => ['class' => ['fontanalib-form']],
    '#optional' => TRUE,
    '#group'  => 'advanced',
    '#attached' => ['library' => 'fontanalib/vertical-tabs'],
    '#access' => FALSE,
  ];
  
    $form['publish_config'] = [
      '#type' => 'fieldset',
      '#group' => 'fontanalib_access_settings',
      '#access' => FALSE,
    ];

    $form['edit_config'] = [
      '#type' => 'fieldset',
      '#group' => 'fontanalib_access_settings',
      '#access' => FALSE,
    ];

    if($publishing_enabled){
      
      $roles = \Drupal::entityTypeManager()->getStorage('user_role')->loadMultiple();
      $options = [];
      
      foreach($roles as $role){
        if(!$role->hasPermission('view staff only content') && !in_array($role->id(), $config->get('staff_roles')) && !$role->hasPermission('administer content')  ){
          $options[$role->id()]=$role->label();
        }
      }
      $default_view_access = 
      
      $form['publish_config']['view_access'] = [
        '#type' => 'checkboxes',
        '#title' => t('Default view access for this type.'),
        '#options' => $options,
        '#default_value' => $type->getThirdPartySetting('fontanalib', 'view_access', $config->get('default_view_access')),
      ];
    }
    if($edit_access_enable){
      $form['edit_config']['#access'] = TRUE;
    }
  
  if ($publishing_enabled && !\Drupal::currentUser()->hasPermission("administer $type_id public publishing")) {
    // Do not show the scheduler fields for users who do not have permission.
    // Setting #access to FALSE for 'scheduler_settings' is enough to hide the
    // fields. Setting FALSE for the individual fields is necessary to keep any
    // existing scheduled dates preserved and remain unchanged on saving.
    $form['fontanalib_access_settings']['#access'] = TRUE;
    $form['publish_config']['#access'] = TRUE;
  }
  if (!\Drupal::currentUser()->hasPermission("configure $type_id edit permissions")) {
    $form['fontanalib_access_settings']['#access'] = TRUE;
    $form['edit_config']['#access'] = TRUE;
  }
}
