<?php

/**
 * @file
 * Install, update and uninstall functions for the catalog_item module.
 */

use Drupal\Core\Url;
use Drupal\Core\Database\Database;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\user\RoleInterface;

/**
 * Implements hook_requirements().
 */
function catalog_item_requirements($phase) {
  $requirements = [];
  if ($phase === 'runtime') {
    // Only show rebuild button if there are either 0, or 2 or more, rows
    // in the {catalog_item_access} table, or if there are modules that
    // implement hook_catalog_item_grants().
    $grant_count = \Drupal::entityTypeManager()->getAccessControlHandler('catalog_item')->countGrants();
    if ($grant_count != 1 || count(\Drupal::moduleHandler()->getImplementations('catalog_item_grants')) > 0) {
      $value = \Drupal::translation()->formatPlural($grant_count, 'One permission in use', '@count permissions in use', ['@count' => $grant_count]);
    }
    else {
      $value = t('Disabled');
    }

    $requirements['catalog_item_access'] = [
      'title' => t('Catalog Item Access Permissions'),
      'value' => $value,
      'description' => t('If the site is experiencing problems with permissions to catalog items, you may have to rebuild the permissions cache. Rebuilding will remove all privileges to content and replace them with permissions based on the current modules and settings. Rebuilding may take some time if there is a lot of content or complex permission settings. After rebuilding has completed, content will automatically use the new permissions. <a href=":rebuild">Rebuild permissions</a>', [
        ':rebuild' => Url::fromRoute('catalog_item.configure_rebuild_confirm')->toString(),
      ]),
    ];
  }
  return $requirements;
}

/**
 * Implements hook_schema().
 */
function catalog_item_schema() {
  $schema['catalog_item_access'] = [
    'description' => 'Identifies which realm/grant pairs a user must possess in order to view, update, or delete specific catalog_items.',
    'fields' => [
      'nid' => [
        'description' => 'The {catalog_item}.nid this record affects.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ],
      'langcode' => [
        'description' => 'The {language}.langcode of this catalog_item.',
        'type' => 'varchar_ascii',
        'length' => 12,
        'not null' => TRUE,
        'default' => '',
      ],
      'fallback' => [
        'description' => 'Boolean indicating whether this record should be used as a fallback if a language condition is not provided.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
        'size' => 'tiny',
      ],
      'gid' => [
        'description' => "The grant ID a user must possess in the specified realm to gain this row's privileges on the catalog_item.",
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ],
      'realm' => [
        'description' => 'The realm in which the user must possess the grant ID. Modules can define one or more realms by implementing hook_catalog_item_grants().',
        'type' => 'varchar_ascii',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ],
      'grant_view' => [
        'description' => 'Boolean indicating whether a user with the realm/grant pair can view this catalog_item.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
      ],
      'grant_update' => [
        'description' => 'Boolean indicating whether a user with the realm/grant pair can edit this catalog_item.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
      ],
      'grant_delete' => [
        'description' => 'Boolean indicating whether a user with the realm/grant pair can delete this catalog_item.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
      ],
    ],
    'primary key' => ['nid', 'gid', 'realm', 'langcode'],
    'foreign keys' => [
      'affected_catalog_item' => [
        'table' => 'catalog_item',
        'columns' => ['nid' => 'nid'],
      ],
    ],
  ];
  $schema['catalog_taxonomy_index'] = [
    'description' => 'Maintains denormalized information about catalog item/term relationships.',
    'fields' => [
      'nid' => [
        'description' => 'The {catalog_item}.nid this record tracks.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ],
      'tid' => [
        'description' => 'The term ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ],
      'status' => [
        'description' => 'Boolean indicating whether the catalog_item is published (visible to non-administrators).',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ],
      'sticky' => [
        'description' => 'Boolean indicating whether the catalog_item is sticky.',
        'type' => 'int',
        'not null' => FALSE,
        'default' => 0,
        'size' => 'tiny',
      ],
      'created' => [
        'description' => 'The Unix timestamp when the catalog_item was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ],
    ],
    'primary key' => ['nid', 'tid'],
    'indexes' => [
      'term_catalog_item' => ['tid', 'status', 'sticky', 'created'],
    ],
    'foreign keys' => [
      'tracked_catalog_item' => [
        'table' => 'catalog_item',
        'columns' => ['nid' => 'nid'],
      ],
      'term' => [
        'table' => 'taxonomy_term_data',
        'columns' => ['tid' => 'tid'],
      ],
    ],
  ];

  return $schema;
}

/**
 * Implements hook_install().
 */
function catalog_item_install() {
  $entities = ['catalog_item', 'node'];
  $config = \Drupal::service('config.factory')->getEditable('fontanalib.settings');
  if(!$config->get('entities') ){
    $config->set('entities', $entities)->save();
  } else{
    $orig = $config->get('entities');
    if(!in_array('catalog_item', $orig)){
      $orig[] = 'catalog_item';
      $config->set('entities', $orig)->save();
    }
  }
  // Enable default permissions for system roles.
  // IMPORTANT: Modules SHOULD NOT automatically grant any user role access
  // permissions in hook_install().
  // However, the 'access catalog' permission is a very special case, since
  // there is hardly a point in installing the Catalog_item module without granting
  // these permissions. Doing so also allows tests to continue to operate as
  // expected without first having to manually grant these default permissions.
  if (\Drupal::moduleHandler()->moduleExists('user')) {
    user_role_grant_permissions(RoleInterface::ANONYMOUS_ID, ['access catalog']);
    user_role_grant_permissions(RoleInterface::AUTHENTICATED_ID, ['access catalog']);
  }

  // Populate the catalog_item access table.
  Database::getConnection()->insert('catalog_item_access')
    ->fields([
      'nid' => 0,
      'gid' => 0,
      'realm' => 'all',
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
    ])
    ->execute();
}

/**
 * Implements hook_uninstall().
 */
function catalog_item_uninstall() {
  // Delete remaining general module variables.
  \Drupal::state()->delete('catalog_item.catalog_item_access_needs_rebuild');
}