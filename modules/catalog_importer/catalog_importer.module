<?php
use Drupal\catalog_importer\Utils\ImporterFunctions;
use Drupal\taxonomy\Entity\Term;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\field\Entity\FieldConfig;
use Drupal\taxonomy\VocabularyInterface;
use Drupal\taxonomy\Entity\Vocabulary;
/**
 * @file
 * Contains catalog_importer.module.
 */
/**
 * Implements hook_ENTITY_TYPE_delete() for taxonomy_term entities.
 */
function catalog_importer_taxonomy_term_delete(Term $term){
  // @TODO update caches on term cahnges
  //ImporterFunctions::catalog_importer_terms_cache($vid)

}
/**
 * Implements hook_ENTITY_TYPE_update() for taxonomy_term entities.
 */
function catalog_importer_taxonomy_term_update(Term $term){
  //ImporterFunctions::catalog_importer_terms_cache($vid)
  
}
/**
 * Adds the default catalog importer term fields to a taxonomy type.
 *
 * @param \Drupal\taxonomy\VocabularyInterface $type
 *   A node type object.
 * @param string $label
 *   (optional) The label for the body instance.
 *
 * @return \Drupal\field\Entity\FieldConfig
 *   A Body field object.
 */
function catalog_importer_add_term_fields(VocabularyInterface $type, $field_id, $label) {
  
     \Drupal::logger('catalog_importer')->notice("catalog_importer_add_term_fields $field_id");
  // Add or remove the body field, as needed.
  $field_storage = FieldStorageConfig::loadByName('taxonomy_term', $field_id);
  $field = FieldConfig::loadByName('taxonomy_term', $type->id(), $field_id);
  if (empty($field)) {
    $field = FieldConfig::create([
      'field_storage' => $field_storage,
      'bundle' => $type->id(),
      'label' => $label,
      'settings' => [
        'max_length' => 255,
        'is_ascii'  => false,
        'case_sensitive'=> false,
      ],
    ]);
    $field->save();

    /** @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface $display_repository */
    $display_repository = \Drupal::service('entity_display.repository');

    // Assign widget settings for the default form mode.
    $display_repository->getFormDisplay('taxonomy_term', $type->id())
      ->setComponent($field_id, [
        'type' => 'string_textfield',
      ])
      ->save();

  }

  return $field;
}
/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alters the fontalib admin settings form
 *
 */
function catalog_importer_form_fontanalib_admin_settings_alter(&$form, $form_state, $form_id) {
  $options = array();
  $vocabularies = Vocabulary::loadMultiple();
  if($vocabularies){
    foreach($vocabularies as $vid => $vocab){
      $options[$vid] = $vocab->get('name');
    }
  }
  
    
  $config = \Drupal::config('fontanalib.settings');
  $form['#tree'] = TRUE;
    $cached_vocabs = $config->get('catalog_importer_cached_vocabs');
    
    $form['vocab_settings'] = array(
      '#tree'   => TRUE,
      '#type'  => 'fieldset',
      '#title' => t('Catalog Taxonomy settings'),
    );
    $form['vocab_settings']['actions']['delete'] = array(
      '#type' => 'submit',
      '#value' => t('Rebuild All Term Caches'),
      '#weight' => 15,
      '#submit' => array('Drupal\catalog_importer\Utils\ImporterFunctions::catalog_importer_rebuild_all_term_caches'),
      '#prefix' => '<div style="float:right;">',
      '#suffix' => '</div>',
  
     );
    $form['vocab_settings']['catalog_vocabularies'] = [
      '#tree' => TRUE,
      '#type' => 'checkboxes',
      '#title' => t('Catalog Vocabularies'),
      '#default_value' => (array) $cached_vocabs,
      '#options'  => $options,
      '#description' => t('Select the vocabularies that should be cached for use with keyword matching in the Catalog Importer.'),
    ];
 
    if($cached_vocabs && !empty($cached_vocabs)){
      $settings = $config->get('catalog_importer_vocab_settings');
      foreach($cached_vocabs as $vocab){
        $diffed = array_diff($cached_vocabs, [$vocab]);
        $form['vocab_settings']['config'][$vocab] = array(
          '#tree'   => TRUE,
          '#type'  => 'fieldset',
          '#title' => t($vocab . ' settings'),
        );

        $form['vocab_settings']['config'][$vocab]['actions']['delete'] = array(
          '#type' => 'submit',
          '#value' => t('Rebuild ' . $options[$vocab] .' Cache'),
          '#submit' => array('Drupal\catalog_importer\Utils\ImporterFunctions::catalog_importer_rebuild_term_cache_submit'),
          '#prefix' => '<div style="float:right;">',
          '#suffix' => '</div>',
         );
         
       $vOptions = array();
       foreach($options as $vid=> $label){
         if(in_array($vid, $diffed)){
           $vOptions[$vid]=$label;
         }
       }
       
        $form['vocab_settings']['config'][$vocab]['diff'] = [
          '#tree' => TRUE,
          '#type' => 'checkboxes',
          '#title' => t('Vocabularies to filter out'),
          '#default_value' => !empty($settings) && isset($settings[$vocab]) && isset($settings[$vocab]['diff']) ? $settings[$vocab]['diff'] : [],
          '#options'  => $vOptions,
          '#description' => t("Select the vocabularies whose terms should be filtered out when parsing terms during import. (i.e. remove genre terms so they aren't duplicated in the topic taxonomy.)"),
        ];
        
      }
    }
  $form['#submit'][] = 'catalog_importer_fontanalib_admin_settings_submit';
}
function catalog_importer_getVocabularies($vids = null){
  $vocabularies = Vocabulary::loadMultiple($vids);
  $option = array();
  if($vocabularies){
    foreach($vocabularies as $vid => $vocab){
      $option[$vid] = $vocab->get('name');
    }
  }
  return $option;
}
function catalog_importer_feeds_target_plugins_alter(array &$definitions) {
  // Our plugin serves same target type as the one from paragraphs module.
  // So we must disable that one.
  // dd($definitions);
  // unset($definitions['paragraphs']);
  // $definitions['paragraphs']["class"] = "Drupal\catalog_importer\Feeds\Target\Paragraphs";
  // $definitions['paragraphs']["class"] = "Drupal\catalog_importer\Feeds\Target\Paragraphs";
  // $definitions['paragraphs']["provider"] = "catalog_importer";
  // $definitions['paragraphs']["form"]["configuration"] ="Drupal\catalog_importer\Feeds\Target\Paragraphs";
  // dd($definitions);
}
function catalog_importer_fontanalib_admin_settings_submit(array &$form, $form_state) {
  $values = $form_state->getValues();
  $config = \Drupal::service('config.factory')->getEditable('fontanalib.settings');
  $vocabs = array();
  
  foreach($values['vocab_settings']['catalog_vocabularies'] as $vocab => $set){
    if(!empty($set)){
      $vocabs[] = $vocab;
      $vocabulary_entity = Vocabulary::load($vocab);
      foreach($config->get('catalog_importer_keyword_fields') as $field_id => $field_label){
        catalog_importer_add_term_fields($vocabulary_entity, $field_id, $field_label);
      }
    }
  } 
  
  if(isset($values['vocab_settings']['config'])){
    $settings = $values['vocab_settings']['config'];
    foreach($settings as $vocab => &$setting){
      foreach($setting as $name => &$values){
        if(is_array($values)){
          $values = array_filter($values);
        }
      }
    }
    $config->set('catalog_importer_vocab_settings', $settings);
  }

  $config->set('catalog_importer_cached_vocabs', $vocabs)->save();
  
  // $config->save();
}